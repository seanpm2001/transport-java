plugins {
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "io.freefair.lombok" version "5.3.0"
    id 'java-library'
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

// enable jar building
jar.enabled = true

// define outputs
group = 'com.vmware'

// build version
buildVersion()

bootJar {
    enabled = false
}

// when building the jar file
tasks.jar {
    from sourceSets.main.output
    include 'com/vmware/transport/**/*'
    include 'transport.properties'

    manifest {
        attributes (
                'Bundle-Name': 'Transport',
                'Bundle-Version': version,
                'Bundle-SymbolicName': 'com.vmware.transport'
        )
    }
    archiveName 'transport-' + version + '.jar'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    testImplementation 'org.springframework.security:spring-security-config'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.1'
    testImplementation 'com.github.tomakehurst:wiremock:2.26.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'junit:junit'

}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        enabled = true
    }
    testLogging {
        showStandardStreams = false
        afterSuite { desc, result ->
            if (!desc.parent) { // true after all suites have executed and final result available.
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/coverage-reports")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/coverage.xml")
        html.enabled true
        html.destination file("${buildDir}/coverage-html")
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        transport(MavenPublication) {
            groupId group
            artifactId "transport"
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'VMware Transport'
                description = 'Transport is a full stack, simple, fast, expandable ' +
                        'application event bus for your applications. It provides a ' +
                        'standardized and simple API, implemented in multiple languages, ' +
                        'to allow any individual component inside your applications to talk ' +
                        'to one another. This is the Java implementation of the Transport library.'
                url = 'https://vmware.github.io/transport/'
                scm {
                    connection = 'scm:https://github.com/vmware/transport-java/'
                    developerConnection = 'scm:https://github.com/vmware/transport-java/'
                    url = 'https://github.com/vmware/transport-java/'
                }
                licenses {
                    license {
                        name = 'BSD-2 License'
                        url = 'https://opensource.org/licenses/BSD-2-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'daveshanley'
                        name = 'Dave Shanley'
                        email = 'dshanley@vmware.com'
                    }
                    developer {
                        id = 'jooskim'
                        name = 'Josh Kim'
                        email = 'kjosh@vmware.com'
                    }
                    developer {
                        name = 'Stoyan Hristov'
                        email = 'shristov@vmware.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def ossSonaTypeUsername = project.findProperty("OSS_SONATYPE_USERNAME") // ORG_GRADLE_PROJECT_OSS_SONATYPE_USERNAME
            def ossSonaTypePassword = project.findProperty("OSS_SONATYPE_PASSWORD") // ORG_GRADLE_PROJECT_OSS_SONATYPE_PASSWORD
            name = 'SonaType'
            credentials {
                username ossSonaTypeUsername
                password ossSonaTypePassword
            }

            if (project.version.endsWith("-SNAPSHOT")) {
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
        }
    }
}

// Note: signing tasks to be executed with the following env variables set appropriately
// ORG_GRADLE_PROJECT_SIGNING_PRIVATE_KEY
// ORG_GRADLE_PROJECT_SIGNING_PASSWORD
signing {
    def signingKey = project.findProperty("SIGNING_PRIVATE_KEY")
    def signingPassword = project.findProperty("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.transport
}

void buildVersion() {
    version = rootProject.file('version.txt').getText('UTF-8').trim()
    if ("snapshot".compareTo(buildType) == 0) {
        version = version + "-SNAPSHOT"
    } else if ("release".compareTo(buildType) == 0) {
        version = version + "-RELEASE"
    }
}
